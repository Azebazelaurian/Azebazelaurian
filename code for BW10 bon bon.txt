x:=Integers()!(-4227850112);
p:=Integers()!((1/3)*(x^3-1)^2*(x^10-x^5+1)+x^3); 
r:=Integers()!(x^8 + x^7 - x^5 - x^4 - x^3 + x + 1);
t:=x^3+1;
/////Construction of finite fields 
Fp:=FiniteField(p);
Fp5<a>:=ExtensionField<Fp,x|x^5+4>;
Fp10<b>:=ExtensionField<Fp5,y|y^2-a>;
//////Construction of the curves
Ep:=EllipticCurve([Fp!(0),Fp!-2]);
Ep5:=EllipticCurve([Fp5!(0),Fp5!-2*a^(-3)]); ///////The twist of Ep defined over Fp5////
Ep10:=EllipticCurve([Fp10!(0),Fp10!-2]); /////The curve Ep defined over Fp10//////////
////#Ep mod r;  ////The order of Ep is divisible by r////

/////Looking for a point P of order r such that Frobenius(P)=P
u:=Integers()!(#Ep10/r);
P:=u*Random(Ep10);


/////Looking for a point Q of order r such that Frobenius(Q)=p*Q///////
uq:=Integers()!(#Ep5/r);

/////////////////Looking for a point Q on G2
QR:=Random(Ep5);
QT:=uq*QR;

//////\pi the Frobenius,is defined from Ep10 to Fp10. We want \pi(Q) ///
x1:=QT[1]*a;
y1:=QT[2]*a*b;
xu:=x1^p;
yu:=y1^p;
X:=Ep10![xu,yu]; 
Y:=Ep10![x1,y1];
Q:=X-Y; 
/////// Q satisfies \pi(Q)=p*Q
Ep10![Q[1]^p,Q[2]^p]-p*Q;
/////////The points P and Q are of order r
r*Q;
r*P;



/////The adding step in the Miller Algorithm///////
Adding:=function ( S1, S2, S3, S4, Q, P,P1,P2 ); 
t1:=Q[1]*S4-S1;
t2:=Q[2]*S3*S4-S2;
t3:=t1^2;
t4:=t1*t3;
t5:=S1*t3;
X:=t2^2-(t4+2*t5);
Y:=t2*(t5-X)-S2*t4;
Z:=S3*t1; 
d:=Z;
t6:=d*(P[2]-Q[2]);
n:=t6-t2*(P[1]-Q[1]);
n1:=t6-t2*(P1[1]-Q[1]);
n2:=t6-t2*(P2[1]-Q[1]);
return [X, Y, Z, Z^2, n, n1, n2];
end function;

/////The Doubling step in the Miller Algorithm///////
Doubling:=function (S1, S2, S3, S4, P, P1,P2, a); 
t1:=S2^2;
t2:=4*S1*t1;
t3:=3*S1^2+a*S4^2;
X:=t3^2-2*t2;
Y:=t3*(t2-X)-8*t1^2;
Z:=S3*2*S2; 
ld:=Z*S4;
t4:=ld*P[2]-2*t1;
ln:=t4-t3*(S4*P[1]-S1);
ln1:=t4-t3*(S4*P1[1]-S1);
ln2:=t4-t3*(S4*P2[1]-S1);
return [X, Y, Z, Z^2, ln, ln1, ln2];
end function;

/////vertical line in the Miller Algorithm///////
ver:=function (S1, S2, S3, S4,  P, P1, P2); 
u_d:=S4;
u_n:=S4*P[1]-S1;
u_n1:=S4*P1[1]-S1;
u_n2:=S4*P2[1]-S1;
return [u_n,u_n1, u_n2];
end function;



Functionsupopt:=function(S1, S2, S3, S4, Q, P, P1, P2, a, x);
n_f:=1; d_f:=1; n_g:=1; d_g:=1;  
bin:=Intseq(Abs(x),2);

for i:=#bin-2 to 0 by -1 do
D:=Doubling(S1, S2, S3, S4, P, P1, P2, a);
S1:=D[1]; S2:=D[2]; S3:=D[3]; S4:=D[4]; ln:=D[5]; ln1:=D[6]; ln2:=D[7]; 
V:=ver(S1, S2, S3, S4,  P, P1, P2);
un:=V[1];  un1:=V[2];  un2:=V[3];

n_f:=n_f^2*ln*un2;   d_f:=d_f^2*un*ln2;
n_g:=n_g^2*un2*ln1;   d_g:=d_g^2*ln2*un1;


if bin[i+1] eq 1 then 
A:=Adding( S1, S2, S3, S4, Q, P, P1, P2); 
S1:=A[1]; S2:=A[2]; S3:=A[3]; S4:=A[4]; ln:=A[5]; ln1:=A[6]; ln2:=A[7];
V:=ver(S1, S2, S3, S4,  P, P1, P2);
un:=V[1];  un1:=V[2];    un2:=V[3];

n_f:=n_f*ln*un2;   d_f:=d_f*un*ln2;
n_g:=n_g*un2*ln1;   d_g:=d_g*ln2*un1;





else if bin[i+1] eq -1 then
A:=Adding( S1, S2, S3, S4, -Q, P, P1, P2); 
S1:=A[1]; S2:=A[2]; S3:=A[3]; S4:=A[4]; ln1:=A[6]; ln2:=A[7];
V:=ver(S1, S2, S3, S4,  P, P1, P2);
un:=V[1];  un1:=V[2];    un2:=V[3];
n_f:=n_f*ln*un2;   d_f:=d_f*un*ln2;
n_g:=n_g*un2*ln1;   d_g:=d_g*ln2*un1;


end if; 
end if;
end for;
return [n_f, d_f, n_g, d_g];
end function;

lam:=x^10;  mu:=(x^10)^2; 





x_a_sup:=function(Q, P);
S1:=Q[1]; S2:=Q[2]; S3:=Q[3]; S4:=1; a:=0;
P1:=lam*P;  P2:=mu*P;
F:=Functionsupopt(S1, S2, S3, S4, Q, P, P1,P2, 0, x);
G:=((F[1]*F[2]^-1)^-x *(F[3]*F[4]^-1)^(p^2))^(Integers()!((p^10-1)/r)) ;
return  G;
end function;


//// The map is not trivial and is bilinear /////
a1:=x_a_sup(Q,P);
aP3:=x_a_sup(Q,3*P);
aQ3:=x_a_sup(3*Q,P);
IsZero(aP3-aQ3);
IsZero(aP3-a1^3);








